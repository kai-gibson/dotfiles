#!/bin/bash
# SET COLORS
RED="$(tput setaf 1)"
GREEN="$(tput setaf 2)"
YELLOW="$(tput setaf 3)"
BOLD="$(tput bold)"
RESET="$(tput sgr0)"

# MAKE FUNCTION FOR PRINTING MESSAGES
print_message() {
    printf '%s%s%s\n' "$2" "$1" "$RESET"
}

# MAKE FUNCTION FOR PRINTING HELP MESSAGE
print_help() {
    print_message "Usage: dec [OPTIONS]"                                "$GREEN"
    print_message "Declarative package manager for Arch Linux"          "$GREEN"
    print_message ""                                                    "$GREEN"
    print_message "Options:"                                            "$GREEN"
    print_message "  --help                Show this help message"      "$GREEN"
    print_message "  --packagelist=FILE    Specify the package list"    "$GREEN"
    print_message "  upgrade               Upgrade packages"            "$GREEN"
    print_message "  install               Install packages"            "$GREEN"
    print_message "  remove                Remove packages"             "$GREEN"
    print_message ""                                                    "$GREEN"
    print_message "Examples:"                                           "$GREEN"
    print_message "  dec upgrade"                                       "$GREEN"
    print_message "  dec --packagelist=packages.txt install"            "$GREEN"
    print_message "  dec remove --packagelist=packages.txt"             "$GREEN"
}

# CHECK IF PARU IS INSTALLED
if ! command -v paru &>/dev/null; then
    print_message "Paru is not installed" "$RED"
    exit 1
fi

# PARSE COMMAND LINE ARGUMENTS
while [[ $# -gt 0 ]]; do
    case "$1" in
        --help | -h)
            print_help
            exit 0
            ;;
        --packagelist=*)
            PACKAGES="${1#*=}"
            ;;
        upgrade)
            UPGRADE=true
            ;;
        install)
            INSTALL=true
            ;;
        remove)
            REMOVE=true
            ;;
        *)
            print_message "Invalid Argument: $1" "$RED"
            exit 1
            ;;
    esac
    shift
done

# SET PACKAGE LIST IF NOT PROVIDED
if [[ ! -v PACKAGES ]]; then
    if [[ -v DEC_PACKAGELIST ]]; then
        PACKAGES="$DEC_PACKAGELIST"
    else
        print_message "No list of packages specified" "$RED"
        print_message "You can specify one by using --packagelist or by setting DEC_PACKAGELIST" "$RED"
        exit 1
    fi
fi

# DEFINE FUNCTIONS FOR UPGRADING, INSTALLING, AND REMOVING PACKAGES
upgrade() {
    print_message "[[ Upgrading packages ]]" "${YELLOW}${BOLD}"
    print_message "* paru -Syu" "$GREEN"
    paru -Syu
}

install() {
    print_message "[[ Installing packages ]]" "${YELLOW}${BOLD}"
    TOINSTALL="$(diff --new-line-format="" --unchanged-line-format="" <(sort -u "$PACKAGES" | sed -e 's/#.*//g' -e '/^$/d') <(paru -Qqe | sort -u) | tr "\n" " ")"
    if [[ -n "$TOINSTALL" ]]; then
        print_message "* paru -S --asexplicit $TOINSTALL" "$GREEN"
        read -rp "$(print_message "About to run above command. Continue? [Y/n] " "$GREEN")" installresult
        case "$installresult" in
            Y | y | "")
                paru -S --asexplicit $TOINSTALL
                ;;
            *)
                return 1
                ;;
        esac
    else
        print_message "No packages need to be installed" "$GREEN"
    fi
}

remove() {
    print_message "[[ Removing packages ]]" "${YELLOW}${BOLD}"
    TOREMOVE="$(diff --new-line-format="" --unchanged-line-format="" <(paru -Qqett | sort -u) <(sort -u "$PACKAGES" | sed -e 's/#.*//g' -e '/^$/d') | tr "\n" " ")"
    if [[ -n "$TOREMOVE" ]]; then
        print_message "* paru -D --asdeps $TOREMOVE" "$GREEN"
        read -rp "$(print_message "About to run above command. Continue? [Y/n] " "$GREEN")" removeresult
        case "$removeresult" in
            Y | y | "")
                paru -D --asdeps $TOREMOVE
                paru --clean
                ;;
            *)
                return 1
                ;;
        esac
    else
        print_message "No packages need to be removed" "$GREEN"
    fi
}

# UPGRADE PACKAGES IF SPECIFIED
if [[ "$UPGRADE" ]]; then
    upgrade
fi

# INSTALL PACKAGES IF SPECIFIED
if [[ "$INSTALL" ]]; then
    install
fi

# REMOVE PACKAGES IF SPECIFIED
if [[ "$REMOVE" ]]; then
    remove
fi

# UPGRADE, INSTALL, AND REMOVE PACKAES IF NO ACTION IS SPECIFIED
if [[ ! "$UPGRADE" ]] && [[ ! "$INSTALL" ]] && [[ ! "$REMOVE" ]]; then
    upgrade
    install
    remove
fi
