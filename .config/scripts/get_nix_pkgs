#!/usr/bin/env python3

import os
import re
import csv

# This script is to be run at boot, it pulls all package names and formats them into a csv

# Shell script
def shell_script(command):
    
    os.system(command)

def create_dict():
    f = open(os.path.expanduser('~/.cache/nix_pkgs'), "r")
    lines = f.readlines()
    
    pkgs_data = []
    
    count = 1
    
    for i in lines:
        # Get rid of new line character on every line
        i = i[:-1]
    
        #print(i, count)
    
        if count == 1:
            prev = i
            count += 1
    
        elif count == 2:
            # If the current is a new line, skip adding description
            if i == "":
                # If there's a version number provided, include it
                if len(prev) >= 2:
                    
                    pkg_full_name = prev[0] 

                    split_name = re.split('\.', pkg_full_name)
                    pkg_name = split_name[-1]

                    version = prev[1]
                    description = 'null'
    
                # Else, set it to null
                elif len(prev) == 1:
                    pkg_full_name = prev[0]

                    split_name = re.split('\.', pkg_full_name)
                    pkg_name = split_name[-1]

                    version = 'null'
                    description = 'null'
    
                else:
                    print("error, package name format, the length: ", len(prev))
                    print(prev)
    
                count = 1
    
            # Otherwise, add description too
            else:
                prev = re.split("\s", prev)
                
                # If there's a version number provided, include it
                if len(prev) >= 2:
                    pkg_full_name = prev[0] 

                    split_name = re.split('\.', pkg_full_name)
                    pkg_name = split_name[-1]

                    version = prev[1]
                    description = i
    
                # Else, set it to null
                elif len(prev) == 1:
                    pkg_full_name = prev[0]

                    split_name = re.split('\.', pkg_full_name)
                    pkg_name = split_name[-1]

                    version = 'null'
                    description = i
    
                else:
                    print("error, package name format, length: ", len(prev))
                    print(prev)
                count += 1
            
            pkgs_data.append({'pkg_full_name': pkg_full_name, 
                'pkg_name': pkg_name, 
                'version': version, 
                'description': description
                })
    
        elif count == 3:
            count = 1
    return pkgs_data

def dict_to_csv(headers, dict_data):
    with open(os.path.expanduser('~/.cache/nix_pkgs_new.csv'), "w") as csvfile:
        writer = csv.DictWriter(csvfile, fieldnames= headers)
        writer.writeheader()
        writer.writerows(dict_data)


# Get package database
cmd = "nix search nixpkgs > ~/.cache/nix_pkgs;"

# Remove colour codes
cmd += "sed -i -r 's/\x1B\[(([0-9]{1,2})?(;)?([0-9]{1,2})?)?[m,K,H,f,J]//g' ~/.cache/nix_pkgs;"

# Remove unnecessary package info
cmd += "sed -i 's/\* legacyPackages.x86_64-linux.//g' ~/.cache/nix_pkgs;"

# Remove previous nix_pkgs_new if it exists
cmd += "if [ -e ~/.cache/nix_pkgs_new.csv ]; then rm ~/.cache/nix_pkgs_new.csv; fi;"


# Get data
os.system(cmd)

# Create csv from the data
dict_to_csv(['pkg_full_name', 'pkg_name', 'version', 'description'], 
        create_dict())

# Then replace previous nix_pkgs with the new one
# We do this so search can still be used while indexing happens
cmd = "mv ~/.cache/nix_pkgs_new.csv ~/.cache/nix_pkgs.csv"
os.system(cmd)


